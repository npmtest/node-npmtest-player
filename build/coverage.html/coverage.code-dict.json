{"/home/travis/build/npmtest/node-npmtest-player/test.js":"/* istanbul instrument in package npmtest_player */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-player/lib.npmtest_player.js":"/* istanbul instrument in package npmtest_player */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_player = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_player = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-player/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-player && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_player */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_player\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_player.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_player.rollup.js'] =\n            local.assetsDict['/assets.npmtest_player.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_player.__dirname + '/lib.npmtest_player.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-player/node_modules/player/dist/player.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { desc = parent = getter = undefined; _again = false; var object = _x2,\n    property = _x3,\n    receiver = _x4; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }\n\n/**\n*\n* Command line interface mp3 player based on Node.js\n* @Author:   [turingou](http://guoyu.me)\n* @Created:  [2013/07/20]\n*\n**/\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _followRedirects = require('follow-redirects');\n\nvar _home = require('home');\n\nvar _home2 = _interopRequireDefault(_home);\n\nvar _lame = require('lame');\n\nvar _lame2 = _interopRequireDefault(_lame);\n\nvar _underscore = require('underscore');\n\nvar _underscore2 = _interopRequireDefault(_underscore);\n\nvar _speaker = require('speaker');\n\nvar _speaker2 = _interopRequireDefault(_speaker);\n\nvar _pool_stream = require('pool_stream');\n\nvar _pool_stream2 = _interopRequireDefault(_pool_stream);\n\nvar _pcmVolume = require('pcm-volume');\n\nvar _pcmVolume2 = _interopRequireDefault(_pcmVolume);\n\nvar _events = require('events');\n\nvar _utils = require('./utils');\n\nvar defaults = {\n  'src': 'src',\n  'cache': false,\n  'stream': false,\n  'shuffle': false,\n  'downloads': _home2['default'](),\n  'http_proxy': process.env.HTTP_PROXY || process.env.http_proxy || null };\n\n/**\n * [Class Player]\n * @param {Array|String} songs  [A list of songs or a single song URI string.]\n * @param {Object}       params [Optional options when init a instance]\n */\n\nvar Player = (function (_EventEmitter) {\n  function Player(songs, params) {\n    _classCallCheck(this, Player);\n\n    //    if (!songs)\n    //      return\n\n    // Inherits eventEmitter\n    _get(Object.getPrototypeOf(Player.prototype), 'constructor', this).call(this);\n\n    this.history = [];\n    this.paused = false;\n    this.options = _underscore2['default'].extend(defaults, params);\n    this._list = _utils.format(songs || [], this.options.src);\n    if (!this._list || !this._list.length) this._list = [];\n  }\n\n  _inherits(Player, _EventEmitter);\n\n  _createClass(Player, [{\n    key: 'enable',\n\n    // Enable or disable a option\n    value: function enable(k) {\n      this.options[k] = true;\n      return this;\n    }\n  }, {\n    key: 'disable',\n    value: function disable(k) {\n      this.options[k] = false;\n      return this;\n    }\n  }, {\n    key: 'list',\n\n    /**\n     * [Lists songs in the playlist,\n     * Displays the src for each song returned in array,\n     * Access with prop `player.list`]\n     */\n    get: function () {\n      var _this2 = this;\n\n      if (!this._list) return;\n\n      return this._list.map(function (el) {\n        return el[_this2.options.src];\n      });\n    }\n  }, {\n    key: 'playing',\n\n    // Get the lastest playing song\n    get: function () {\n      if (!this.history.length) return null;\n\n      return this._list[this.history[this.history.length - 1]];\n    }\n  }, {\n    key: 'play',\n\n    /**\n     * [Play a MP3 encoded audio file]\n     * @param  {Number} index [the selected index of first played song]\n     */\n    value: function play() {\n      var _this3 = this;\n\n      var index = arguments[0] === undefined ? 0 : arguments[0];\n\n      if (this._list.length <= 0) return;\n      if (!_underscore2['default'].isNumber(index)) index = 0;\n      if (index >= this._list.length) index = this._list.length - 1;\n\n      var self = this;\n      var song = this._list[index];\n\n      this.paused = false;\n      this.read(song[this.options.src], function (err, pool) {\n        if (err) return _this3.emit('error', err);\n\n        _this3.meta(pool, function (err, data) {\n          if (!err) song.meta = data;\n        });\n\n        _this3.lameStream = new _lame2['default'].Decoder();\n\n        pool.pipe(_this3.lameStream).once('format', onPlaying).once('finish', function () {\n          return _this3.next();\n        });\n\n        function onPlaying(f) {\n          self.lameFormat = f;\n          var speaker = new _pcmVolume2['default']();\n          speaker.pipe(new _speaker2['default'](self.lameFormat));\n\n          self.speaker = {\n            'readableStream': this,\n            'Speaker': speaker };\n\n          self.emit('playing', song);\n          self.history.push(index);\n\n          // This is where the song acturaly played end,\n          // can't trigger playend event here cause\n          // unpipe will fire this speaker's close event.\n          this.pipe(speaker).once('close', function () {\n            return self.emit('playend', song);\n          });\n        }\n      });\n\n      return this;\n    }\n  }, {\n    key: 'setVolume',\n\n    /**\n     * [Set playback volume]\n     * @param  {Number}   volume   [Volume level percentage 0.0-1.0]\n     */\n    value: function setVolume(volume) {\n      if (!this.speaker) return;\n\n      this.speaker.Speaker.setVolume(volume);\n    }\n  }, {\n    key: 'read',\n\n    /**\n     * [Read MP3 src and check if we're going to download it.]\n     * @param  {String}   src      [MP3 file src, would be local path or URI (http/https)]\n     * @param  {Function} callback [callback with err and file stream]\n     */\n    value: function read(src, callback) {\n      var isLocal = !(src.indexOf('http') == 0 || src.indexOf('https') == 0);\n\n      // Read local file stream if not a valid URI\n      if (isLocal) return callback(null, _fs2['default'].createReadStream(src));\n\n      var file = _path2['default'].join(this.options.downloads, _utils.fetchName(src));\n\n      if (_fs2['default'].existsSync(file)) return callback(null, _fs2['default'].createReadStream(file));\n\n      this.download(src, callback);\n    }\n  }, {\n    key: 'pause',\n\n    /**\n     * [Pause or resume audio]\n     * @return {player} this\n     */\n    value: function pause() {\n      if (this.paused) {\n        this.speaker.Speaker = new _pcmVolume2['default']();\n        this.speaker.Speaker.pipe(new _speaker2['default'](this.lameFormat));\n\n        this.lameStream.pipe(this.speaker.Speaker);\n      } else {\n        this.speaker.Speaker.end();\n      }\n\n      this.paused = !this.paused;\n      return this;\n    }\n  }, {\n    key: 'stop',\n\n    /**\n     * [Stop playing and unpipe stream.\n     * No params for now.]\n     * @return {Bool} [always `false`]\n     */\n    value: function stop() {\n      if (!this.speaker) return;\n\n      this.speaker.readableStream.unpipe();\n\n      this.speaker.Speaker.end();\n\n      return;\n    }\n  }, {\n    key: 'next',\n\n    /**\n     * [Stop playing and switch to next song,\n     * if there is no next song, trigger a `No next song` error event]\n     * @return {player} this\n     */\n    value: function next() {\n      var list = this._list;\n      var current = this.playing;\n      var nextIndex = this.options.shuffle ? _utils.chooseRandom(_underscore2['default'].difference(list, [current._id])) : current._id + 1;\n\n      if (nextIndex >= list.length) {\n        this.emit('error', 'No next song was found');\n        this.emit('finish', current);\n        return this;\n      }\n\n      this.stop();\n      this.play(nextIndex);\n\n      return this;\n    }\n  }, {\n    key: 'add',\n\n    /**\n     * [Add a new song to the playlist,\n     * If provided `song` is a String, it will be converted to a `Song` Object.]\n     * @param {String|Object} song [src URI of new song or the object of new song.]\n     */\n    value: function add(song) {\n      var latest = _underscore2['default'].isObject(song) ? song : {};\n\n      latest._id = this._list.length;\n\n      if (_underscore2['default'].isString(song)) {\n        latest._name = _utils.splitName(song);\n        latest[this.options.src] = song;\n      }\n\n      this._list.push(latest);\n    }\n  }, {\n    key: 'download',\n\n    /**\n     * [Download a mp3 file from its URI]\n     * @param  {String}   src      [the src URI of mp3 file]\n     * @param  {Function} callback [callback with err and file stream]\n     */\n    value: function download(src, callback) {\n      var self = this;\n      var called = false;\n      var proxyReg = /http:\\/\\/((?:\\d{1,3}\\.){3}\\d{1,3}):(\\d+)/;\n      var http_proxy = self.options.http_proxy;\n      var request = src.indexOf('https') === 0 ? _followRedirects.https : _followRedirects.http;\n      var query = src;\n\n      if (http_proxy && proxyReg.test(http_proxy)) {\n        var proxyGroup = http_proxy.match(proxyReg);\n        query = {};\n        query.path = src;\n        query.host = proxyGroup[1];\n        query.port = proxyGroup[2];\n      }\n\n      request.get(query, responseHandler).once('error', errorHandler);\n\n      function responseHandler(res) {\n        called = true;\n\n        var isOk = res.statusCode === 200;\n        var isAudio = res.headers['content-type'].indexOf('audio/mpeg') > -1;\n        var isSave = self.options.cache;\n        var isStream = self.options.stream;\n\n        if (!isOk) return callback(new Error('Resource invalid'));\n        if (isStream) return callback(null, res);\n        if (!isAudio) return callback(new Error('Resource type is unsupported'));\n\n        // Create a pool\n        var pool = new _pool_stream2['default']();\n        // Pipe into memory\n        res.pipe(pool);\n\n        // Check if we're going to save this stream\n        if (!isSave) return callback(null, pool);\n\n        // Save this stream as file in download directory\n        var file = _path2['default'].join(self.options.downloads, _utils.fetchName(src));\n\n        self.emit('downloading', src);\n        pool.pipe(_fs2['default'].createWriteStream(file));\n\n        // Callback the pool\n        callback(null, pool);\n      }\n\n      function errorHandler(err) {\n        if (!called) callback(err);\n      }\n    }\n  }, {\n    key: 'meta',\n\n    // Fetch metadata from local or remote mp3 stream\n    value: function meta(stream, callback) {\n      var _this4 = this;\n\n      try {\n        var mm = require('musicmetadata');\n      } catch (err) {\n        return callback(err);\n      }\n\n      var options = {\n        'duration': true\n      };\n\n      stream.on('error', function (err) {\n        return _this4.emit('error', '出错了 ' + err.code + ': ' + err.path);\n      });\n\n      return mm(stream, options, callback);\n    }\n  }, {\n    key: 'progress',\n\n    // Format metadata with template\n    // And output to `stdout`\n    value: function progress(metadata) {\n      var total = 70;\n      var info = metadata.title;\n      var duration = parseInt(metadata.duration);\n      var dots = total - 1;\n      var speed = duration * 1000 / total;\n      var stdout = process.stdout;\n\n      require('async').doWhilst(function (callback) {\n        // Clear console\n        stdout.write('\\u001b[2J\\u001b[0;0f');\n\n        // Move cursor to beginning of line\n        stdout.cursorTo(0);\n        stdout.write(_utils.getProgress(total - dots, total, info));\n\n        setTimeout(callback, speed);\n\n        dots--;\n      }, function () {\n        return dots > 0;\n      }, function (done) {\n        stdout.moveCursor(0, -1);\n        stdout.clearLine();\n        stdout.cursorTo(0);\n      });\n    }\n  }]);\n\n  return Player;\n})(_events.EventEmitter);\n\nexports['default'] = Player;\nmodule.exports = exports['default'];\n//# sourceMappingURL=player.js.map","/home/travis/build/npmtest/node-npmtest-player/node_modules/player/libs/cli.js":"import path from 'path'\nimport keypress from 'keypress'\nimport Player from '../dist/player'\n\nexport default function() {\n  var command = process.argv[2]\n  if (!command)\n    return\n\n  var songs = process.argv.splice(3)\n  if (!songs || songs.length === 0)\n    return\n\n  var player = new Player(format(songs))\n\n  try {\n    player[command]()\n  } catch (err) {\n    console.log(err)\n  }\n\n  function format(songs) {\n    return songs.map((songPath) => {\n      if (isAbs(songPath))\n        return songPath\n\n      return path.join(process.cwd(), songPath)\n    })\n  }\n\n  function isAbs(str) {\n    if (str.indexOf('http') === 0 || str.indexOf('https') === 0)\n      return true\n\n    var beginWith = str.charAt(0)\n    if (beginWith === '~' || beginWith == '/')\n      return true\n\n    return false\n  }\n\n  var vol = 1\n\n  function updateVolume() {\n    player.setVolume(vol)\n    console.log('volume: ' + Math.floor(vol * 100))\n  }\n\n  keypress(process.stdin);\n\n  var paused = false\n\n  process.stdin.on('keypress', function (ch, key) {\n    if (key && key.ctrl && key.name == 'c') {\n      process.exit(0)\n    }\n    if (key && key.name == 'space') {\n      player.pause()\n      if(!paused)\n        console.log('paused')\n      else\n        console.log('resuming')\n      paused = !paused\n    }\n    if (key && key.name == 'x') {\n      player.stop()\n      console.log('stopped')\n    }\n    if (key && key.name == 's') {\n      player.play()\n      console.log('playing')\n    }\n    if (key && key.name == 'up') {\n      vol += 0.1;\n      if(vol > 1) {\n          vol = 1\n      }\n      updateVolume()\n    }\n    if (key && key.name == 'down') {\n      vol -= 0.1;\n      if(vol < 0) {\n          vol = 0\n      }\n      updateVolume()\n    }\n  });\n\n  process.stdin.setRawMode(true)\n  process.stdin.resume()\n\n  console.log('press \"x\" to stop, press \"s\" to play, press \"space\" to pause / resume')\n  console.log('press \"Up\" to increase volume, press \"Down\" to decrease volume')\n}\n","/home/travis/build/npmtest/node-npmtest-player/node_modules/player/libs/player.js":"/**\n*\n* Command line interface mp3 player based on Node.js\n* @Author:   [turingou](http://guoyu.me)\n* @Created:  [2013/07/20]\n*\n**/\n\nimport fs from 'fs'\nimport path from 'path'\nimport util from \"util\"\nimport { http, https } from 'follow-redirects'\nimport home from 'home'\nimport lame from 'lame'\nimport _ from 'underscore'\nimport Speaker from 'speaker'\nimport PoolStream from 'pool_stream'\nimport Volume from 'pcm-volume'\nimport { EventEmitter } from \"events\"\nimport { fetchName, splitName, format, getProgress, chooseRandom } from './utils'\n\nconst defaults = {\n  'src': 'src',\n  'cache': false,\n  'stream': false,\n  'shuffle': false,\n  'downloads': home(),\n  'http_proxy': process.env.HTTP_PROXY || process.env.http_proxy || null,\n}\n\n/**\n * [Class Player]\n * @param {Array|String} songs  [A list of songs or a single song URI string.]\n * @param {Object}       params [Optional options when init a instance]\n */\nexport default class Player extends EventEmitter {\n  constructor(songs, params) {\n//    if (!songs)\n//      return\n\n    // Inherits eventEmitter\n    super()\n\n    this.history = []\n    this.paused = false\n    this.options = _.extend(defaults, params)\n    this._list = format(songs || [], this.options.src)\n    if (!this._list || !this._list.length) this._list = []\n  }\n\n  // Enable or disable a option\n  enable(k) {\n    this.options[k] = true\n    return this\n  }\n\n  disable(k) {\n    this.options[k] = false\n    return this\n  }\n\n  /**\n   * [Lists songs in the playlist,\n   * Displays the src for each song returned in array,\n   * Access with prop `player.list`]\n   */\n  get list() {\n    if (!this._list)\n      return\n\n    return this._list.map(el => el[this.options.src])\n  }\n\n  // Get the lastest playing song\n  get playing() {\n    if (!this.history.length)\n      return null\n\n    return this._list[this.history[this.history.length - 1]]\n  }\n\n  /**\n   * [Play a MP3 encoded audio file]\n   * @param  {Number} index [the selected index of first played song]\n   */\n  play(index = 0) {\n    if (this._list.length <= 0)\n      return\n    if (!_.isNumber(index))\n      index = 0\n    if (index >= this._list.length) index = this._list.length - 1;\n\n    let self = this\n    let song = this._list[index]\n\n    this.paused = false\n    this.read(song[this.options.src], (err, pool) => {\n      if (err)\n        return this.emit('error', err)\n\n      this.meta(pool, (err, data) => {\n        if (!err) \n          song.meta = data\n      })\n\n      this.lameStream = new lame.Decoder()\n\n      pool\n        .pipe(this.lameStream)\n        .once('format', onPlaying)\n        .once('finish', () => this.next())\n\n      function onPlaying(f) {\n        self.lameFormat = f\n        var speaker = new Volume()\n        speaker.pipe(new Speaker(self.lameFormat))\n\n        self.speaker = {\n          'readableStream': this,\n          'Speaker': speaker,\n        }\n\n        self.emit('playing', song)\n        self.history.push(index)\n\n        // This is where the song acturaly played end,\n        // can't trigger playend event here cause\n        // unpipe will fire this speaker's close event.\n        this.pipe(speaker)\n          .once('close', () => \n            self.emit('playend', song))\n      }\n    })\n\n    return this\n  }\n\n  /**\n   * [Set playback volume]\n   * @param  {Number}   volume   [Volume level percentage 0.0-1.0]\n   */\n   setVolume(volume) {\n       if(!this.speaker)\n           return;\n\n       this.speaker.Speaker.setVolume(volume);\n   }\n\n  /**\n   * [Read MP3 src and check if we're going to download it.]\n   * @param  {String}   src      [MP3 file src, would be local path or URI (http/https)]\n   * @param  {Function} callback [callback with err and file stream]\n   */\n  read(src, callback) {\n    var isLocal = !(src.indexOf('http') == 0 || src.indexOf('https') == 0)\n\n    // Read local file stream if not a valid URI\n    if (isLocal)\n      return callback(null, fs.createReadStream(src))\n\n    var file = path.join(\n      this.options.downloads,\n      fetchName(src)\n    )\n\n    if (fs.existsSync(file))\n      return callback(null, fs.createReadStream(file))\n\n    this.download(src, callback)\n  }\n\n  /**\n   * [Pause or resume audio]\n   * @return {player} this\n   */\n  pause() {\n    if (this.paused) {\n      this.speaker.Speaker = new Volume()\n      this.speaker.Speaker.pipe(new Speaker(this.lameFormat))\n\n      this.lameStream.pipe(this.speaker.Speaker)\n    } else {\n      this.speaker.Speaker.end()\n    }\n\n    this.paused = !this.paused\n    return this\t\n  }\n\n  /**\n   * [Stop playing and unpipe stream.\n   * No params for now.]\n   * @return {Bool} [always `false`]\n   */\n  stop() {\n    if (!this.speaker)\n      return\n\n    this.speaker\n      .readableStream\n      .unpipe()\n\n    this.speaker\n      .Speaker\n      .end()\n\n    return\n  }\n\n  /**\n   * [Stop playing and switch to next song,\n   * if there is no next song, trigger a `No next song` error event]\n   * @return {player} this\n   */\n  next() {\n    let list = this._list\n    let current = this.playing\n    let nextIndex = this.options.shuffle ? \n      chooseRandom(_.difference(list, [current._id])) :\n      current._id + 1\n\n    if (nextIndex >= list.length) {\n      this.emit('error', 'No next song was found')\n      this.emit('finish', current)\n      return this\n    }\n\n    this.stop()\n    this.play(nextIndex)\n\n    return this\n  }\n\n  /**\n   * [Add a new song to the playlist,\n   * If provided `song` is a String, it will be converted to a `Song` Object.]\n   * @param {String|Object} song [src URI of new song or the object of new song.]\n   */\n  add(song) {\n    var latest = _.isObject(song) ? song : {}\n\n    latest._id = this._list.length\n\n    if (_.isString(song)) {\n      latest._name = splitName(song)\n      latest[this.options.src] = song\n    }\n\n    this._list.push(latest)\n  }\n\n  /**\n   * [Download a mp3 file from its URI]\n   * @param  {String}   src      [the src URI of mp3 file]\n   * @param  {Function} callback [callback with err and file stream]\n   */\n  download(src, callback) {\n    var self = this\n    var called = false\n    var proxyReg = /http:\\/\\/((?:\\d{1,3}\\.){3}\\d{1,3}):(\\d+)/\n    var http_proxy = self.options.http_proxy\n    var request = src.indexOf('https') === 0 ? https : http\n    var query = src\n\n    if (http_proxy && proxyReg.test(http_proxy)) {\n      var proxyGroup = http_proxy.match(proxyReg)\n      query = {}\n      query.path = src\n      query.host = proxyGroup[1]\n      query.port = proxyGroup[2]\n    }\n\n    request\n      .get(query, responseHandler)\n      .once('error', errorHandler)\n\n    function responseHandler(res) {\n      called = true\n\n      var isOk = (res.statusCode === 200)\n      var isAudio = (res.headers['content-type'].indexOf('audio/mpeg') > -1)\n      var isSave = self.options.cache\n      var isStream = self.options.stream\n\n      if (!isOk)\n        return callback(new Error('Resource invalid'))\n      if (isStream)\n        return callback(null, res)\n      if (!isAudio)\n        return callback(new Error('Resource type is unsupported'))\n\n      // Create a pool\n      var pool = new PoolStream()\n      // Pipe into memory\n      res.pipe(pool)\n\n      // Check if we're going to save this stream\n      if (!isSave)\n        return callback(null, pool)\n\n      // Save this stream as file in download directory\n      var file = path.join(\n        self.options.downloads,\n        fetchName(src)\n      )\n\n      self.emit('downloading', src)\n      pool.pipe(fs.createWriteStream(file))\n\n      // Callback the pool\n      callback(null, pool)\n    }\n\n    function errorHandler(err) {\n      if (!called)\n        callback(err)\n    }\n  }\n\n  // Fetch metadata from local or remote mp3 stream\n  meta(stream, callback) {\n    try {\n      var mm = require('musicmetadata')\n    } catch (err) {\n      return callback(err)\n    }\n\n    var options = {\n      'duration': true\n    }\n\n    stream.on('error', err => \n      this.emit('error', `出错了 ${err.code}: ${err.path}`))\n\n    return mm(stream, options, callback)\n  }\n\n  // Format metadata with template \n  // And output to `stdout`\n  progress(metadata) {\n    var total = 70\n    var info = metadata.title\n    var duration = parseInt(metadata.duration)\n    var dots = total - 1\n    var speed = (duration * 1000) / total\n    var stdout = process.stdout\n\n    require('async').doWhilst(\n      (callback) => {\n        // Clear console\n        stdout.write('\\u001B[2J\\u001B[0;0f')\n\n        // Move cursor to beginning of line\n        stdout.cursorTo(0)\n        stdout.write(getProgress(total - dots, total, info))\n\n        setTimeout(callback, speed)\n\n        dots--\n      },\n      () => dots > 0,\n      (done) => {\n        stdout.moveCursor(0, -1)\n        stdout.clearLine()\n        stdout.cursorTo(0)\n      }\n    )\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-player/node_modules/player/libs/utils.js":"export function fetchName(str) {\n  var filename = str.substr(str.lastIndexOf('/') + 1)\n\n  // Escape URI like this: `http://domain.com/xxx.mp3?xcode=fasda`\n  if (filename.indexOf('?') !== -1) {\n    var parts = filename.split('?')\n    filename = parts[0]\n  }\n\n  return filename\n}\n\nexport function format(list, srcKey) {\n  var songs = []\n\n  if (typeof(list) === 'string') {\n    songs.push({\n      [ srcKey ]: list,\n      '_id': 0,\n      '_name': splitName(list),\n    })\n\n    return songs\n  }\n\n  list.forEach((item, index) => {\n    // If `songs` is a Map\n    if (typeof(item) === 'object') {\n      item._id = index\n\n      if (item[srcKey])\n        item._name = splitName(item[srcKey])\n\n      songs.push(item)\n      return\n    }\n\n    // If `songs` is a Array\n    songs.push({\n      [ srcKey ]: item,\n      '_id': index,\n      '_name': splitName(item)\n    })\n  })\n\n  return songs\n}\n\nexport function chooseRandom(arr) {\n  if (!arr || !arr.length)\n    return 0\n\n  let min = 0\n  let max = arr.length - 1\n\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport function getProgress(p, t, info) {\n  var bar = ''\n  bar += ('Now playing: ' + info)\n  bar += '\\n['\n\n  for (var i = 0; i < p; i++)\n    bar += '>'\n\n  for (var i = p; i < t - 1; i++)\n    bar += ' '\n\n  bar += ']'\n\n  return bar\n}\n\nexport function splitName(str) {\n  return str.split('/').pop()\n}\n"}